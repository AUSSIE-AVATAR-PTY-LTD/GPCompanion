"use client"

import { useState, useEffect } from "react"
import { Navigation } from "@/components/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { ChevronDown, ChevronUp } from "lucide-react"

export default function HeartHealthPage() {
  const [formData, setFormData] = useState<Record<string, any>>({})
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    mbsInfo: true,
    patientDetails: true,
    history: true,
    examination: true,
    investigations: true,
    riskAssessment: true,
    plan: true,
  })

  // Load data from localStorage on component mount
  useEffect(() => {
    const savedData = localStorage.getItem("heart-health-assessment-data")
    if (savedData) {
      setFormData(JSON.parse(savedData))
    }
  }, [])

  // Save data to localStorage whenever formData changes
  useEffect(() => {
    localStorage.setItem("heart-health-assessment-data", JSON.stringify(formData))
  }, [formData])

  const updateFormData = (field: string, value: any) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
  }

  const toggleSection = (section: string) => {
    setExpandedSections((prev) => ({ ...prev, [section]: !prev[section] }))
  }

  const calculateAge = (dob: string) => {
    if (!dob) return ""
    const today = new Date()
    const birthDate = new Date(dob)
    let age = today.getFullYear() - birthDate.getFullYear()
    const monthDiff = today.getMonth() - birthDate.getMonth()
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--
    }
    return age.toString()
  }

  const calculateBMI = (weight: string, height: string) => {
    if (!weight || !height) return ""
    const w = Number.parseFloat(weight)
    const h = Number.parseFloat(height) / 100 // convert cm to m
    if (w > 0 && h > 0) {
      return (w / (h * h)).toFixed(1)
    }
    return ""
  }

  const clearForm = () => {
    setFormData({})
    localStorage.removeItem("heart-health-assessment-data")
  }

  const exportToTxt = () => {
    const content = generateExportContent()
    const blob = new Blob([content], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `Heart_Health_Assessment_${new Date().toISOString().slice(0, 10)}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const exportToRtf = () => {
    const content = generateRtfContent()
    const blob = new Blob([content], { type: "application/rtf" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `Heart_Health_Assessment_${new Date().toISOString().slice(0, 10)}.rtf`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const generateExportContent = () => {
    return `HEART HEALTH CHECK
GP Health Assessment Tool (MBS Items 699/177)
Generated on: ${new Date().toLocaleDateString()}

MBS INFORMATION:
MBS Item: ${formData.mbsItem || "Not selected"}

PATIENT DETAILS:
Name: ${formData.patientName || "Not provided"}
Date of Birth: ${formData.dob || "Not provided"}
Age: ${formData.age || "Not calculated"}
Gender: ${formData.gender || "Not provided"}
Address: ${formData.address || "Not provided"}

HISTORY & MEDICATION:
Current Medications: ${formData.medications || "Not provided"}
Medical History: ${formData.medicalHistory || "Not provided"}
Family History: ${formData.familyHistory || "Not provided"}
Social History: ${formData.socialHistory || "Not provided"}

EXAMINATION:
Blood Pressure: ${formData.bloodPressure || "Not recorded"}
Weight: ${formData.weight || "Not recorded"}
Height: ${formData.height || "Not recorded"}
BMI: ${formData.bmi || "Not calculated"}
Pulse: ${formData.pulse || "Not recorded"}
General Examination: ${formData.generalExam || "Not provided"}

INVESTIGATIONS:
Recent Pathology: ${formData.pathology || "Not provided"}
ECG: ${formData.ecg || "Not provided"}

CARDIOVASCULAR RISK ASSESSMENT:
Risk Factors: ${formData.riskFactors || "Not provided"}
Calculated Risk: ${formData.calculatedRisk || "Not provided"}

PLAN & RECOMMENDATIONS:
Management Plan: ${formData.managementPlan || "Not provided"}
Follow-up: ${formData.followUp || "Not provided"}
Referrals: ${formData.referrals || "Not provided"}

Generated by GP Companion - Dr Bobby Tork MD, FRACGP-RG
© 2025 Dr Bobby Tork`
  }

  const generateRtfContent = () => {
    const plainContent = generateExportContent()
    return `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}
\\f0\\fs24 ${plainContent.replace(/\n/g, "\\par ")}}}`
  }

  const SectionHeader = ({ title, section }: { title: string; section: string }) => (
    <div
      className="flex justify-between items-center cursor-pointer p-4 bg-transparent text-primary border-b border-primary/20 rounded-t-lg"
      onClick={() => toggleSection(section)}
    >
      <h2 className="text-xl font-bold text-primary">{title}</h2>
      {expandedSections[section] ? <ChevronUp className="text-primary" /> : <ChevronDown className="text-primary" />}
    </div>
  )

  return (
    <div className="min-h-screen bg-background">
      <Navigation />
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="mb-8 text-center">
            <h1 className="text-3xl font-bold mb-2 text-primary">Heart Health Check</h1>
            <p className="text-muted-foreground">GP Health Assessment Tool (MBS Items 699/177)</p>
            <p className="text-sm font-semibold mt-2">Developed by Dr Bobby Tork MD, FRACGP-RG</p>
            <p className="text-xs text-muted-foreground">© 2025 Dr Bobby Tork</p>
          </div>

          {/* MBS Information Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="MBS Information" section="mbsInfo" />
            {expandedSections.mbsInfo && (
              <CardContent className="p-6">
                <label className="block text-lg font-medium mb-3">
                  Select the appropriate MBS item number (assessment must be at least 20 minutes):
                </label>
                <div className="space-y-3">
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="mbs-item"
                      value="699"
                      checked={formData.mbsItem === "699"}
                      onChange={(e) => updateFormData("mbsItem", e.target.value)}
                      className="h-4 w-4 text-primary focus:ring-primary border-border rounded mr-3"
                    />
                    <strong>Item 699</strong> - Performed by a medical practitioner.
                  </label>
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="mbs-item"
                      value="177"
                      checked={formData.mbsItem === "177"}
                      onChange={(e) => updateFormData("mbsItem", e.target.value)}
                      className="h-4 w-4 text-primary focus:ring-primary border-border rounded mr-3"
                    />
                    <strong>Item 177</strong> - Performed on behalf of a medical practitioner by a practice nurse or
                    Aboriginal and Torres Strait Islander health practitioner.
                  </label>
                </div>
                <div className="mt-4 p-3 bg-secondary/10 rounded-lg text-sm text-secondary">
                  This health assessment is available annually to an eligible patient.
                </div>
              </CardContent>
            )}
          </Card>

          {/* Patient Details Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Patient Details" section="patientDetails" />
            {expandedSections.patientDetails && (
              <CardContent className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Patient Name: <span className="text-muted-foreground font-normal">(optional)</span>
                    </label>
                    <input
                      type="text"
                      value={formData.patientName || ""}
                      onChange={(e) => updateFormData("patientName", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="Enter patient name"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Date of Birth:</label>
                    <input
                      type="date"
                      value={formData.dob || ""}
                      onChange={(e) => {
                        updateFormData("dob", e.target.value)
                        updateFormData("age", calculateAge(e.target.value))
                      }}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <div className="p-3 bg-gray-100 rounded-md text-center font-medium h-full flex items-center justify-center">
                      {formData.age ? `Age: ${formData.age} years` : "Age will be calculated"}
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Gender:</label>
                    <div className="flex space-x-4 mt-2">
                      <label className="flex items-center">
                        <input
                          type="radio"
                          name="gender"
                          value="male"
                          checked={formData.gender === "male"}
                          onChange={(e) => updateFormData("gender", e.target.value)}
                          className="h-4 w-4 text-primary focus:ring-primary border-border rounded mr-2"
                        />
                        Male
                      </label>
                      <label className="flex items-center">
                        <input
                          type="radio"
                          name="gender"
                          value="female"
                          checked={formData.gender === "female"}
                          onChange={(e) => updateFormData("gender", e.target.value)}
                          className="h-4 w-4 text-primary focus:ring-primary border-border rounded mr-2"
                        />
                        Female
                      </label>
                      <label className="flex items-center">
                        <input
                          type="radio"
                          name="gender"
                          value="other"
                          checked={formData.gender === "other"}
                          onChange={(e) => updateFormData("gender", e.target.value)}
                          className="h-4 w-4 text-primary focus:ring-primary border-border rounded mr-2"
                        />
                        Other
                      </label>
                    </div>
                  </div>
                </div>
                <div className="mt-4">
                  <label className="block text-sm font-medium mb-1">Address:</label>
                  <textarea
                    value={formData.address || ""}
                    onChange={(e) => updateFormData("address", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter patient address"
                    rows={2}
                  />
                </div>
              </CardContent>
            )}
          </Card>

          {/* History & Medication Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="History & Medication" section="history" />
            {expandedSections.history && (
              <CardContent className="p-6 space-y-4">
                <div>
                  <label className="block font-medium mb-1">Current Medications:</label>
                  <textarea
                    value={formData.medications || ""}
                    onChange={(e) => updateFormData("medications", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="List current medications"
                    rows={3}
                  />
                </div>
                <div>
                  <label className="block font-medium mb-1">Medical History:</label>
                  <textarea
                    value={formData.medicalHistory || ""}
                    onChange={(e) => updateFormData("medicalHistory", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter relevant medical history"
                    rows={3}
                  />
                </div>
                <div>
                  <label className="block font-medium mb-1">Family History:</label>
                  <textarea
                    value={formData.familyHistory || ""}
                    onChange={(e) => updateFormData("familyHistory", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter relevant family history"
                    rows={3}
                  />
                </div>
                <div>
                  <label className="block font-medium mb-1">Social History:</label>
                  <textarea
                    value={formData.socialHistory || ""}
                    onChange={(e) => updateFormData("socialHistory", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter social history (smoking, alcohol, exercise, etc.)"
                    rows={3}
                  />
                </div>
              </CardContent>
            )}
          </Card>

          {/* Examination Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Examination" section="examination" />
            {expandedSections.examination && (
              <CardContent className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                  <div>
                    <label className="block font-medium mb-1">Blood Pressure (mmHg):</label>
                    <input
                      type="text"
                      value={formData.bloodPressure || ""}
                      onChange={(e) => updateFormData("bloodPressure", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="e.g., 120/80"
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Pulse (bpm):</label>
                    <input
                      type="text"
                      value={formData.pulse || ""}
                      onChange={(e) => updateFormData("pulse", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="e.g., 72"
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Weight (kg):</label>
                    <input
                      type="number"
                      value={formData.weight || ""}
                      onChange={(e) => {
                        updateFormData("weight", e.target.value)
                        updateFormData("bmi", calculateBMI(e.target.value, formData.height))
                      }}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="e.g., 70"
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Height (cm):</label>
                    <input
                      type="number"
                      value={formData.height || ""}
                      onChange={(e) => {
                        updateFormData("height", e.target.value)
                        updateFormData("bmi", calculateBMI(formData.weight, e.target.value))
                      }}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="e.g., 170"
                    />
                  </div>
                  <div>
                    <div className="p-3 bg-gray-100 rounded-md text-center font-medium">
                      BMI: {formData.bmi || "Not calculated"}
                    </div>
                  </div>
                </div>
                <div>
                  <label className="block font-medium mb-1">General Examination:</label>
                  <textarea
                    value={formData.generalExam || ""}
                    onChange={(e) => updateFormData("generalExam", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter examination findings"
                    rows={4}
                  />
                </div>
              </CardContent>
            )}
          </Card>

          {/* Investigations Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Investigations" section="investigations" />
            {expandedSections.investigations && (
              <CardContent className="p-6 space-y-4">
                <div>
                  <label className="block font-medium mb-1">Recent Pathology:</label>
                  <textarea
                    value={formData.pathology || ""}
                    onChange={(e) => updateFormData("pathology", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter recent pathology results (lipids, glucose, etc.)"
                    rows={3}
                  />
                </div>
                <div>
                  <label className="block font-medium mb-1">ECG:</label>
                  <textarea
                    value={formData.ecg || ""}
                    onChange={(e) => updateFormData("ecg", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter ECG findings"
                    rows={2}
                  />
                </div>
              </CardContent>
            )}
          </Card>

          {/* Cardiovascular Risk Assessment Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Cardiovascular Risk Assessment" section="riskAssessment" />
            {expandedSections.riskAssessment && (
              <CardContent className="p-6 space-y-4">
                <div>
                  <label className="block font-medium mb-1">Risk Factors:</label>
                  <textarea
                    value={formData.riskFactors || ""}
                    onChange={(e) => updateFormData("riskFactors", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="List cardiovascular risk factors"
                    rows={3}
                  />
                </div>
                <div>
                  <label className="block font-medium mb-1">Calculated Risk:</label>
                  <textarea
                    value={formData.calculatedRisk || ""}
                    onChange={(e) => updateFormData("calculatedRisk", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter calculated cardiovascular risk (e.g., using Australian CVD Risk Calculator)"
                    rows={2}
                  />
                </div>
              </CardContent>
            )}
          </Card>

          {/* Plan & Recommendations Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Plan & Recommendations" section="plan" />
            {expandedSections.plan && (
              <CardContent className="p-6 space-y-4">
                <div>
                  <label className="block font-medium mb-1">Management Plan:</label>
                  <textarea
                    value={formData.managementPlan || ""}
                    onChange={(e) => updateFormData("managementPlan", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter management plan and recommendations"
                    rows={4}
                  />
                </div>
                <div>
                  <label className="block font-medium mb-1">Follow-up:</label>
                  <textarea
                    value={formData.followUp || ""}
                    onChange={(e) => updateFormData("followUp", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter follow-up plan"
                    rows={2}
                  />
                </div>
                <div>
                  <label className="block font-medium mb-1">Referrals:</label>
                  <textarea
                    value={formData.referrals || ""}
                    onChange={(e) => updateFormData("referrals", e.target.value)}
                    className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Enter any referrals required"
                    rows={2}
                  />
                </div>
              </CardContent>
            )}
          </Card>

          {/* Export Buttons */}
          <div className="flex gap-4 justify-center mb-8">
            <Button onClick={exportToTxt} className="bg-primary hover:bg-primary/90">
              Export as .txt
            </Button>
            <Button
              onClick={exportToRtf}
              variant="outline"
              className="border-primary text-primary hover:bg-primary hover:text-white bg-transparent"
            >
              Export as .rtf
            </Button>
          </div>

          <div className="text-center text-sm text-muted-foreground">
            <p>
              All data is stored locally in your browser for privacy. Generated documents are downloaded to your device.
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}
