"use client"

import { useState, useEffect } from "react"
import { Navigation } from "@/components/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { ChevronDown, ChevronUp } from "lucide-react"

export default function MenopauseHealthAssessment() {
  const [formData, setFormData] = useState<Record<string, any>>({})
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    mbs: true,
    patient: true,
    history: true,
    examination: true,
    plan: true,
  })

  // Calculate age when DOB changes
  useEffect(() => {
    if (formData.patientDob) {
      const today = new Date()
      const birthDate = new Date(formData.patientDob)
      let age = today.getFullYear() - birthDate.getFullYear()
      const monthDiff = today.getMonth() - birthDate.getMonth()
      if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--
      }
      setFormData((prev) => ({ ...prev, calculatedAge: age }))
    }
  }, [formData.patientDob])

  // Save form data to localStorage
  useEffect(() => {
    localStorage.setItem("menopause-assessment-data", JSON.stringify(formData))
  }, [formData])

  // Load form data from localStorage on mount
  useEffect(() => {
    const savedData = localStorage.getItem("menopause-assessment-data")
    if (savedData) {
      setFormData(JSON.parse(savedData))
    }
  }, [])

  const updateFormData = (field: string, value: any) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
  }

  const toggleSection = (section: string) => {
    setExpandedSections((prev) => ({ ...prev, [section]: !prev[section] }))
  }

  const exportToTxt = () => {
    const content = generateExportContent()
    const blob = new Blob([content], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `Menopause_Assessment_${new Date().toISOString().slice(0, 10)}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const exportToRtf = () => {
    const content = generateRtfContent()
    const blob = new Blob([content], { type: "application/rtf" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `Menopause_Assessment_${new Date().toISOString().slice(0, 10)}.rtf`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const generateExportContent = () => {
    return `MENOPAUSE & PERIMENOPAUSE HEALTH ASSESSMENT
Generated on: ${new Date().toLocaleDateString()}

MBS INFORMATION:
Selected Item: ${formData.mbsItem || "Not selected"}

PATIENT DETAILS:
Name: ${formData.patientName || "Not provided"}
Assessment Date: ${formData.assessmentDate || "Not provided"}
DOB: ${formData.patientDob || "Not provided"}
Age: ${formData.calculatedAge || "Not calculated"}
Medicare No: ${formData.patientMedicare || "Not provided"}

HISTORY:
Main Concerns: ${formData.mainConcerns || "Not provided"}
Last Menstrual Period: ${formData.lmpDate || "Not provided"}
Cycle Regularity: ${formData.lmpCycle || "Not provided"}
Flow: ${formData.lmpFlow || "Not provided"}
Other Menstrual History: ${formData.lmpOther || "Not provided"}

MENOPAUSE SYMPTOMS:
Hot Flushes: ${formData.hotFlushes || "Not assessed"}
Night Sweats: ${formData.nightSweats || "Not assessed"}
Sleep Disturbance: ${formData.sleepDisturbance || "Not assessed"}
Mood Changes: ${formData.moodChanges || "Not assessed"}
Vaginal Dryness: ${formData.vaginalDryness || "Not assessed"}
Libido Changes: ${formData.libidoChanges || "Not assessed"}

EXAMINATION:
Blood Pressure: ${formData.bloodPressure || "Not recorded"}
Weight: ${formData.weight || "Not recorded"}
Height: ${formData.height || "Not recorded"}
BMI: ${formData.bmi || "Not calculated"}

PLAN & RECOMMENDATIONS:
${formData.planRecommendations || "Not provided"}

Generated by GP Companion - Dr Bobby Tork MD, FRACGP-RG
© 2025 Dr Bobby Tork`
  }

  const generateRtfContent = () => {
    const plainContent = generateExportContent()
    return `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}
\\f0\\fs24 ${plainContent.replace(/\n/g, "\\par ")}}}`
  }

  const SectionHeader = ({ title, section }: { title: string; section: string }) => (
    <div
      className="flex justify-between items-center cursor-pointer p-4 bg-transparent text-primary border-b border-primary/20 rounded-t-lg"
      onClick={() => toggleSection(section)}
    >
      <h2 className="text-xl font-bold text-primary">{title}</h2>
      {expandedSections[section] ? <ChevronUp className="text-primary" /> : <ChevronDown className="text-primary" />}
    </div>
  )

  return (
    <div className="min-h-screen bg-background">
      <Navigation />
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="mb-8 text-center">
            <h1 className="text-3xl font-bold mb-2 text-primary">Menopause & Perimenopause Health Assessment</h1>
            <p className="text-muted-foreground">GP Health Assessment Tool</p>
            <p className="text-sm font-semibold mt-2">Developed by Dr Bobby Tork MD, FRACGP-RG</p>
            <p className="text-xs text-muted-foreground">© 2025 Dr Bobby Tork</p>
          </div>

          {/* MBS Information Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="MBS Information" section="mbs" />
            {expandedSections.mbs && (
              <CardContent className="p-6">
                <label className="block text-lg font-medium mb-3">Select the appropriate MBS item number:</label>
                <div className="space-y-3">
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="mbs-item"
                      value="695"
                      checked={formData.mbsItem === "695"}
                      onChange={(e) => updateFormData("mbsItem", e.target.value)}
                      className="h-4 w-4 text-primary focus:ring-primary border-border rounded mr-3"
                    />
                    <b>GP Item 695</b>
                  </label>
                  <label className="flex items-center">
                    <input
                      type="radio"
                      name="mbs-item"
                      value="19000"
                      checked={formData.mbsItem === "19000"}
                      onChange={(e) => updateFormData("mbsItem", e.target.value)}
                      className="h-4 w-4 text-primary focus:ring-primary border-border rounded mr-3"
                    />
                    <b>PMP Item 19000</b>
                  </label>
                </div>
                <div className="mt-4 p-3 bg-secondary/10 rounded-lg text-sm text-secondary">
                  This health assessment is available every 12 months.
                </div>
              </CardContent>
            )}
          </Card>

          {/* Patient Details Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Patient Details" section="patient" />
            {expandedSections.patient && (
              <CardContent className="p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Name: <span className="text-muted-foreground font-normal">(optional)</span>
                    </label>
                    <input
                      type="text"
                      value={formData.patientName || ""}
                      onChange={(e) => updateFormData("patientName", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Assessment Date:</label>
                    <input
                      type="date"
                      value={formData.assessmentDate || new Date().toISOString().slice(0, 10)}
                      onChange={(e) => updateFormData("assessmentDate", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">DOB:</label>
                    <input
                      type="date"
                      value={formData.patientDob || ""}
                      onChange={(e) => updateFormData("patientDob", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <div className="p-3 bg-gray-100 rounded-md text-center font-medium h-full flex items-center justify-center">
                      {formData.calculatedAge ? `Age: ${formData.calculatedAge} years` : "Age will be calculated"}
                    </div>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Medicare No: <span className="text-muted-foreground font-normal">(optional)</span>
                    </label>
                    <input
                      type="text"
                      value={formData.patientMedicare || ""}
                      onChange={(e) => updateFormData("patientMedicare", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                </div>
              </CardContent>
            )}
          </Card>

          {/* History Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="History" section="history" />
            {expandedSections.history && (
              <CardContent className="p-6">
                <div className="mb-6">
                  <label className="block font-medium mb-2">Patient's main concern with menopause/perimenopause:</label>
                  <textarea
                    value={formData.mainConcerns || ""}
                    onChange={(e) => updateFormData("mainConcerns", e.target.value)}
                    className="w-full p-2 border border-border rounded-md h-24 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="Describe patient's primary concerns..."
                  />
                </div>

                <h3 className="text-lg font-semibold mb-4 pb-2 border-b border-gray-200">LMP / Menstrual History</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                  <div>
                    <label className="block font-medium mb-1">Last Menstrual Period:</label>
                    <input
                      type="text"
                      value={formData.lmpDate || ""}
                      onChange={(e) => updateFormData("lmpDate", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="Approx. date (e.g., MM/YYYY)"
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Cycle Regularity:</label>
                    <select
                      value={formData.lmpCycle || ""}
                      onChange={(e) => updateFormData("lmpCycle", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    >
                      <option value="">Select...</option>
                      <option value="Regular">Regular</option>
                      <option value="Irregular">Irregular</option>
                      <option value="Amenorrhoeic (>12 months)">Amenorrhoeic (&gt;12 months)</option>
                      <option value="Amenorrhoeic (<12 months)">Amenorrhoeic (&lt;12 months)</option>
                    </select>
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Flow:</label>
                    <select
                      value={formData.lmpFlow || ""}
                      onChange={(e) => updateFormData("lmpFlow", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    >
                      <option value="">Select...</option>
                      <option value="Normal">Normal</option>
                      <option value="Heavy">Heavy</option>
                      <option value="Light">Light</option>
                    </select>
                  </div>
                </div>
                <div className="mb-6">
                  <label className="block font-medium mb-1">Other relevant menstrual history:</label>
                  <textarea
                    value={formData.lmpOther || ""}
                    onChange={(e) => updateFormData("lmpOther", e.target.value)}
                    className="w-full p-2 border border-border rounded-md h-16 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    placeholder="e.g., intermenstrual bleeding, postcoital bleeding..."
                  />
                </div>

                <h3 className="text-lg font-semibold mb-4 pb-2 border-b border-gray-200">
                  Menopause/Perimenopause Symptoms
                </h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="space-y-4">
                    <div>
                      <label className="block font-medium mb-2">Hot Flushes:</label>
                      <select
                        value={formData.hotFlushes || ""}
                        onChange={(e) => updateFormData("hotFlushes", e.target.value)}
                        className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      >
                        <option value="">Select...</option>
                        <option value="None">None</option>
                        <option value="Mild">Mild</option>
                        <option value="Moderate">Moderate</option>
                        <option value="Severe">Severe</option>
                      </select>
                    </div>
                    <div>
                      <label className="block font-medium mb-2">Night Sweats:</label>
                      <select
                        value={formData.nightSweats || ""}
                        onChange={(e) => updateFormData("nightSweats", e.target.value)}
                        className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      >
                        <option value="">Select...</option>
                        <option value="None">None</option>
                        <option value="Mild">Mild</option>
                        <option value="Moderate">Moderate</option>
                        <option value="Severe">Severe</option>
                      </select>
                    </div>
                    <div>
                      <label className="block font-medium mb-2">Sleep Disturbance:</label>
                      <select
                        value={formData.sleepDisturbance || ""}
                        onChange={(e) => updateFormData("sleepDisturbance", e.target.value)}
                        className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      >
                        <option value="">Select...</option>
                        <option value="None">None</option>
                        <option value="Mild">Mild</option>
                        <option value="Moderate">Moderate</option>
                        <option value="Severe">Severe</option>
                      </select>
                    </div>
                  </div>
                  <div className="space-y-4">
                    <div>
                      <label className="block font-medium mb-2">Mood Changes:</label>
                      <select
                        value={formData.moodChanges || ""}
                        onChange={(e) => updateFormData("moodChanges", e.target.value)}
                        className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      >
                        <option value="">Select...</option>
                        <option value="None">None</option>
                        <option value="Mild">Mild</option>
                        <option value="Moderate">Moderate</option>
                        <option value="Severe">Severe</option>
                      </select>
                    </div>
                    <div>
                      <label className="block font-medium mb-2">Vaginal Dryness:</label>
                      <select
                        value={formData.vaginalDryness || ""}
                        onChange={(e) => updateFormData("vaginalDryness", e.target.value)}
                        className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      >
                        <option value="">Select...</option>
                        <option value="None">None</option>
                        <option value="Mild">Mild</option>
                        <option value="Moderate">Moderate</option>
                        <option value="Severe">Severe</option>
                      </select>
                    </div>
                    <div>
                      <label className="block font-medium mb-2">Libido Changes:</label>
                      <select
                        value={formData.libidoChanges || ""}
                        onChange={(e) => updateFormData("libidoChanges", e.target.value)}
                        className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      >
                        <option value="">Select...</option>
                        <option value="None">None</option>
                        <option value="Decreased">Decreased</option>
                        <option value="Increased">Increased</option>
                      </select>
                    </div>
                  </div>
                </div>
              </CardContent>
            )}
          </Card>

          {/* Examination Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Examination" section="examination" />
            {expandedSections.examination && (
              <CardContent className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <label className="block font-medium mb-1">Blood Pressure:</label>
                    <input
                      type="text"
                      value={formData.bloodPressure || ""}
                      onChange={(e) => updateFormData("bloodPressure", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="e.g., 120/80"
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Weight (kg):</label>
                    <input
                      type="number"
                      value={formData.weight || ""}
                      onChange={(e) => updateFormData("weight", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Height (cm):</label>
                    <input
                      type="number"
                      value={formData.height || ""}
                      onChange={(e) => updateFormData("height", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <div className="p-3 bg-gray-100 rounded-md text-center font-medium">
                      BMI:{" "}
                      {formData.weight && formData.height
                        ? (formData.weight / Math.pow(formData.height / 100, 2)).toFixed(1)
                        : "Not calculated"}
                    </div>
                  </div>
                </div>
              </CardContent>
            )}
          </Card>

          {/* Plan Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Plan & Recommendations" section="plan" />
            {expandedSections.plan && (
              <CardContent className="p-6">
                <textarea
                  value={formData.planRecommendations || ""}
                  onChange={(e) => updateFormData("planRecommendations", e.target.value)}
                  className="w-full p-2 border border-border rounded-md h-32 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                  placeholder="Enter treatment plan and recommendations..."
                />
              </CardContent>
            )}
          </Card>

          {/* Export Buttons */}
          <div className="flex gap-4 justify-center mb-8">
            <Button onClick={exportToTxt} className="bg-primary hover:bg-primary/90">
              Export as .txt
            </Button>
            <Button
              onClick={exportToRtf}
              variant="outline"
              className="border-primary text-primary hover:bg-primary hover:text-white bg-transparent"
            >
              Export as .rtf
            </Button>
          </div>

          <div className="text-center text-sm text-muted-foreground">
            <p>
              All data is stored locally in your browser for privacy. Generated documents are downloaded to your device.
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}
