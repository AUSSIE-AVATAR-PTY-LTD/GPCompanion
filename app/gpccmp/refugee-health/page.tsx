"use client"

import { useState, useEffect } from "react"
import { Navigation } from "@/components/navigation"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { ChevronDown, ChevronUp } from "lucide-react"

export default function RefugeeHealthAssessment() {
  const [formData, setFormData] = useState<Record<string, any>>({})
  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({
    demographics: true,
    medicalHistory: true,
    physicalAssessment: true,
    screening: true,
    recommendations: true,
  })

  useEffect(() => {
    localStorage.setItem("refugee-assessment-data", JSON.stringify(formData))
  }, [formData])

  useEffect(() => {
    const savedData = localStorage.getItem("refugee-assessment-data")
    if (savedData) {
      setFormData(JSON.parse(savedData))
    }
  }, [])

  const updateFormData = (field: string, value: any) => {
    setFormData((prev) => ({ ...prev, [field]: value }))
  }

  const toggleSection = (section: string) => {
    setExpandedSections((prev) => ({ ...prev, [section]: !prev[section] }))
  }

  const exportToTxt = () => {
    const content = generateExportContent()
    const blob = new Blob([content], { type: "text/plain" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `Refugee_Health_Assessment_${new Date().toISOString().slice(0, 10)}.txt`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const exportToRtf = () => {
    const content = generateRtfContent()
    const blob = new Blob([content], { type: "application/rtf" })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = `Refugee_Health_Assessment_${new Date().toISOString().slice(0, 10)}.rtf`
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const generateExportContent = () => {
    return `REFUGEE HEALTH ASSESSMENT
Generated on: ${new Date().toLocaleDateString()}

PATIENT DEMOGRAPHICS:
Name: ${formData.patientName || "Not provided"}
Date of Birth: ${formData.dob || "Not provided"}
Age: ${formData.age || "Not provided"}
Gender: ${formData.gender || "Not provided"}
Country of Origin: ${formData.countryOfOrigin || "Not provided"}
Arrival Date: ${formData.arrivalDate || "Not provided"}
Interpreter Required: ${formData.interpreterRequired ? "Yes" : "No"}
${formData.interpreterRequired ? `Language: ${formData.interpreterLanguage || "Not specified"}` : ""}

MEDICAL HISTORY:
Past Medical History: ${formData.medicalHistory || "Not provided"}
Current Medications: ${formData.currentMedications || "Not provided"}
Allergies: ${formData.allergies || "Not provided"}
Immunization History: ${formData.immunizationHistory || "Not provided"}

PHYSICAL ASSESSMENT:
Height: ${formData.height || "Not recorded"} cm
Weight: ${formData.weight || "Not recorded"} kg
BMI: ${formData.bmi || "Not calculated"}
Blood Pressure: ${formData.bloodPressure || "Not recorded"}
Pulse: ${formData.pulse || "Not recorded"} bpm
Temperature: ${formData.temperature || "Not recorded"}°C

SCREENING RESULTS:
TB Screening: ${formData.tbScreening || "Not provided"}
Hepatitis B: ${formData.hepatitisB || "Not provided"}
Hepatitis C: ${formData.hepatitisC || "Not provided"}
HIV: ${formData.hiv || "Not provided"}
Mental Health Screening: ${formData.mentalHealthScreening || "Not provided"}

RECOMMENDATIONS & FOLLOW-UP:
Follow-up Required: ${formData.followUpRequired ? "Yes" : "No"}
Referrals: ${formData.referrals || "Not provided"}
Treatment Plan: ${formData.treatmentPlan || "Not provided"}
Next Appointment: ${formData.nextAppointment || "Not provided"}

Generated by GP Companion - Dr Bobby Tork MD, FRACGP-RG
© 2025 Dr Bobby Tork`
  }

  const generateRtfContent = () => {
    const plainContent = generateExportContent()
    return `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}
\\f0\\fs24 ${plainContent.replace(/\n/g, "\\par ")}}}`
  }

  const SectionHeader = ({ title, section }: { title: string; section: string }) => (
    <div
      className="flex justify-between items-center cursor-pointer p-4 bg-transparent text-primary border-b border-primary/20 rounded-t-lg"
      onClick={() => toggleSection(section)}
    >
      <h2 className="text-xl font-bold text-primary">{title}</h2>
      {expandedSections[section] ? <ChevronUp className="text-primary" /> : <ChevronDown className="text-primary" />}
    </div>
  )

  useEffect(() => {
    if (formData.height && formData.weight) {
      const height = Number.parseFloat(formData.height)
      const weight = Number.parseFloat(formData.weight)
      if (height > 0 && weight > 0) {
        const heightInMeters = height / 100
        const bmi = (weight / (heightInMeters * heightInMeters)).toFixed(1)
        setFormData((prev) => ({ ...prev, bmi }))
      }
    }
  }, [formData.height, formData.weight])

  return (
    <div className="min-h-screen bg-background">
      <Navigation />
      <div className="container mx-auto px-4 py-8">
        <div className="max-w-4xl mx-auto">
          <div className="mb-8 text-center">
            <h1 className="text-3xl font-bold mb-2 text-primary">Refugee Health Assessment</h1>
            <p className="text-muted-foreground">Comprehensive Post-Arrival Health Assessment Tool</p>
            <p className="text-sm font-semibold mt-2">Developed by Dr Bobby Tork MD, FRACGP-RG</p>
            <p className="text-xs text-muted-foreground">© 2025 Dr Bobby Tork</p>
          </div>

          {/* Patient Demographics Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Patient Demographics" section="demographics" />
            {expandedSections.demographics && (
              <CardContent className="p-6">
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-6">
                  <div>
                    <label className="block text-sm font-medium mb-1">
                      Name: <span className="text-muted-foreground font-normal">(optional)</span>
                    </label>
                    <input
                      type="text"
                      value={formData.patientName || ""}
                      onChange={(e) => updateFormData("patientName", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Date of Birth:</label>
                    <input
                      type="date"
                      value={formData.dob || ""}
                      onChange={(e) => updateFormData("dob", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Age:</label>
                    <input
                      type="number"
                      value={formData.age || ""}
                      onChange={(e) => updateFormData("age", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="Years"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Gender:</label>
                    <select
                      value={formData.gender || ""}
                      onChange={(e) => updateFormData("gender", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    >
                      <option value="">Select...</option>
                      <option value="Male">Male</option>
                      <option value="Female">Female</option>
                      <option value="Other">Other</option>
                    </select>
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Country of Origin:</label>
                    <input
                      type="text"
                      value={formData.countryOfOrigin || ""}
                      onChange={(e) => updateFormData("countryOfOrigin", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <label className="block text-sm font-medium mb-1">Arrival Date in Australia:</label>
                    <input
                      type="date"
                      value={formData.arrivalDate || ""}
                      onChange={(e) => updateFormData("arrivalDate", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                </div>
                <div className="mt-4 flex items-center">
                  <input
                    type="checkbox"
                    id="interpreterRequired"
                    checked={formData.interpreterRequired || false}
                    onChange={(e) => updateFormData("interpreterRequired", e.target.checked)}
                    className="h-4 w-4 text-primary focus:ring-primary border-border rounded mr-3"
                  />
                  <label htmlFor="interpreterRequired" className="text-sm font-medium">
                    Interpreter Required
                  </label>
                </div>
                {formData.interpreterRequired && (
                  <div className="mt-4">
                    <label className="block text-sm font-medium mb-1">Interpreter Language:</label>
                    <input
                      type="text"
                      value={formData.interpreterLanguage || ""}
                      onChange={(e) => updateFormData("interpreterLanguage", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                )}
              </CardContent>
            )}
          </Card>

          {/* Medical History Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Medical History" section="medicalHistory" />
            {expandedSections.medicalHistory && (
              <CardContent className="p-6">
                <div className="space-y-4">
                  <div>
                    <label className="block font-medium mb-2">Past Medical History:</label>
                    <textarea
                      value={formData.medicalHistory || ""}
                      onChange={(e) => updateFormData("medicalHistory", e.target.value)}
                      className="w-full p-2 border border-border rounded-md h-24 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="Include chronic conditions, surgeries, hospitalizations..."
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-2">Current Medications:</label>
                    <textarea
                      value={formData.currentMedications || ""}
                      onChange={(e) => updateFormData("currentMedications", e.target.value)}
                      className="w-full p-2 border border-border rounded-md h-20 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="List all current medications and dosages..."
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-2">Allergies:</label>
                    <textarea
                      value={formData.allergies || ""}
                      onChange={(e) => updateFormData("allergies", e.target.value)}
                      className="w-full p-2 border border-border rounded-md h-16 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="Drug allergies, food allergies, environmental allergies..."
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-2">Immunization History:</label>
                    <textarea
                      value={formData.immunizationHistory || ""}
                      onChange={(e) => updateFormData("immunizationHistory", e.target.value)}
                      className="w-full p-2 border border-border rounded-md h-20 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="Previous vaccinations and dates if known..."
                    />
                  </div>
                </div>
              </CardContent>
            )}
          </Card>

          {/* Physical Assessment Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Physical Assessment" section="physicalAssessment" />
            {expandedSections.physicalAssessment && (
              <CardContent className="p-6">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                  <div>
                    <label className="block font-medium mb-1">Height (cm):</label>
                    <input
                      type="number"
                      value={formData.height || ""}
                      onChange={(e) => updateFormData("height", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Weight (kg):</label>
                    <input
                      type="number"
                      value={formData.weight || ""}
                      onChange={(e) => updateFormData("weight", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <div className="p-3 bg-gray-100 rounded-md text-center font-medium">
                      BMI: {formData.bmi || "Not calculated"}
                    </div>
                  </div>
                </div>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                  <div>
                    <label className="block font-medium mb-1">Blood Pressure:</label>
                    <input
                      type="text"
                      value={formData.bloodPressure || ""}
                      onChange={(e) => updateFormData("bloodPressure", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="e.g., 120/80"
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Pulse (bpm):</label>
                    <input
                      type="number"
                      value={formData.pulse || ""}
                      onChange={(e) => updateFormData("pulse", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Temperature (°C):</label>
                    <input
                      type="number"
                      step="0.1"
                      value={formData.temperature || ""}
                      onChange={(e) => updateFormData("temperature", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                    />
                  </div>
                </div>
              </CardContent>
            )}
          </Card>

          {/* Screening Results Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Screening Results" section="screening" />
            {expandedSections.screening && (
              <CardContent className="p-6">
                <div className="space-y-4">
                  <div>
                    <label className="block font-medium mb-2">TB Screening:</label>
                    <textarea
                      value={formData.tbScreening || ""}
                      onChange={(e) => updateFormData("tbScreening", e.target.value)}
                      className="w-full p-2 border border-border rounded-md h-16 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="Chest X-ray results, TST/IGRA results, symptoms assessment..."
                    />
                  </div>
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block font-medium mb-1">Hepatitis B Status:</label>
                      <input
                        type="text"
                        value={formData.hepatitisB || ""}
                        onChange={(e) => updateFormData("hepatitisB", e.target.value)}
                        className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                        placeholder="HBsAg, Anti-HBs, Anti-HBc results"
                      />
                    </div>
                    <div>
                      <label className="block font-medium mb-1">Hepatitis C Status:</label>
                      <input
                        type="text"
                        value={formData.hepatitisC || ""}
                        onChange={(e) => updateFormData("hepatitisC", e.target.value)}
                        className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                        placeholder="Anti-HCV, HCV RNA results"
                      />
                    </div>
                  </div>
                  <div>
                    <label className="block font-medium mb-1">HIV Status:</label>
                    <input
                      type="text"
                      value={formData.hiv || ""}
                      onChange={(e) => updateFormData("hiv", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="HIV test results if performed"
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-2">Mental Health Screening:</label>
                    <textarea
                      value={formData.mentalHealthScreening || ""}
                      onChange={(e) => updateFormData("mentalHealthScreening", e.target.value)}
                      className="w-full p-2 border border-border rounded-md h-20 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="PTSD screening, depression screening, anxiety assessment..."
                    />
                  </div>
                </div>
              </CardContent>
            )}
          </Card>

          {/* Recommendations Section */}
          <Card className="mb-6 border-primary/20">
            <SectionHeader title="Recommendations & Follow-up" section="recommendations" />
            {expandedSections.recommendations && (
              <CardContent className="p-6">
                <div className="space-y-4">
                  <div className="flex items-center">
                    <input
                      type="checkbox"
                      id="followUpRequired"
                      checked={formData.followUpRequired || false}
                      onChange={(e) => updateFormData("followUpRequired", e.target.checked)}
                      className="h-4 w-4 text-primary focus:ring-primary border-border rounded mr-3"
                    />
                    <label htmlFor="followUpRequired" className="font-medium">
                      Follow-up Required
                    </label>
                  </div>
                  <div>
                    <label className="block font-medium mb-2">Referrals:</label>
                    <textarea
                      value={formData.referrals || ""}
                      onChange={(e) => updateFormData("referrals", e.target.value)}
                      className="w-full p-2 border border-border rounded-md h-20 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="Specialist referrals, allied health referrals, community services..."
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-2">Treatment Plan:</label>
                    <textarea
                      value={formData.treatmentPlan || ""}
                      onChange={(e) => updateFormData("treatmentPlan", e.target.value)}
                      className="w-full p-2 border border-border rounded-md h-24 focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="Immediate treatment needs, medication recommendations, health education..."
                    />
                  </div>
                  <div>
                    <label className="block font-medium mb-1">Next Appointment:</label>
                    <input
                      type="text"
                      value={formData.nextAppointment || ""}
                      onChange={(e) => updateFormData("nextAppointment", e.target.value)}
                      className="w-full p-2 border border-border rounded-md focus:ring-2 focus:ring-primary focus:border-transparent bg-input"
                      placeholder="Date and purpose of next visit"
                    />
                  </div>
                </div>
              </CardContent>
            )}
          </Card>

          {/* Export Buttons */}
          <div className="flex gap-4 justify-center mb-8">
            <Button onClick={exportToTxt} className="bg-primary hover:bg-primary/90">
              Export as .txt
            </Button>
            <Button
              onClick={exportToRtf}
              variant="outline"
              className="border-primary text-primary hover:bg-primary hover:text-white bg-transparent"
            >
              Export as .rtf
            </Button>
          </div>

          <div className="text-center text-sm text-muted-foreground">
            <p>
              All data is stored locally in your browser for privacy. Generated documents are downloaded to your device.
            </p>
          </div>
        </div>
      </div>
    </div>
  )
}
